webpackHotUpdate("frameline",{

/***/ "./resources/js/frameline.js":
/*!***********************************!*\
  !*** ./resources/js/frameline.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var frameLine = function frameLine(cfg) {\n  'use strict';\n\n  var _default = {\n    element: '.frameline',\n    index: 0,\n    reverse: false,\n    controller: true,\n    startImgIndex: 0,\n    lineBgColor: '#000'\n  };\n\n  if (cfg) {\n    _default = Object.assign(cfg, _default);\n  }\n\n  var globalConfig = {\n    clips: {\n      width: null,\n      height: null,\n      length: null\n    },\n    controller: {\n      width: 930,\n      height: 20,\n      bgColor: '#a7a7a7',\n      currPercent: 0,\n      currClipIndex: 0\n    }\n  };\n  var currentClipElement; // let windows = document.defaultView;\n  // console.log('window: ', windows);\n\n  var frameElement = document.querySelector(_default.element);\n  var newFrameClipGroup = document.createElement('div');\n  var newFrameController = document.createElement('div');\n  var newControllerBar = document.createElement('div');\n  var newControllerBarActive = document.createElement('div');\n  var newControllerButton = document.createElement('div');\n  frameElement.classList.add('frameline-container');\n  frameElement.style.cssText = \"\\n    width: 960px;\\n  \";\n  var frameElementChild = frameElement.children;\n  var totalClip = frameElement.children.length;\n  globalConfig.clips.length = totalClip;\n  console.log('Get FrameLiner <div>', frameElement);\n  console.log('Get FrameLiner <img>', totalClip); // Append Base Elements\n\n  var initFrameLineElement = function initFrameLineElement(mainContent, clipGroup, clipImg, controller, controllerBar, controllerBarActive, controllerButton) {\n    function _eachImgAddClassName() {\n      for (var i = 0; i < totalClip; i = i + 1) {\n        if (i === 0) {\n          globalConfig.clips.width = clipImg[i].clientWidth;\n          globalConfig.clips.height = clipImg[i].clientHeight;\n        }\n\n        clipImg[i].classList.add('frameline-clip', \"clip-\".concat(i));\n        clipImg[i].style.cssText = \"\\n          width: 960px;\\n          height: 540px;\\n        \";\n      }\n    }\n\n    function _appendParentElementForAllImg() {\n      clipGroup.classList.add('frameline-clip-group');\n\n      while (frameElement.hasChildNodes()) {\n        clipGroup.appendChild(mainContent.firstChild);\n      }\n\n      mainContent.appendChild(clipGroup); // controller style\n\n      clipGroup.style.cssText = \"\\n        width: 960px;\\n        height: 540px;\\n      \";\n    }\n\n    _eachImgAddClassName();\n\n    _appendParentElementForAllImg();\n\n    if (!_default.controller) {\n      return;\n    }\n\n    function _appendControllerInterface() {\n      controller.classList.add('frameline-controller');\n      controllerBar.classList.add('frameline-controller-bar');\n      controllerBarActive.classList.add('frameline-bar-active');\n      controllerButton.classList.add('frameline-controller-button');\n      mainContent.appendChild(controller);\n      controllerBar.appendChild(controllerBarActive);\n      controllerBar.appendChild(controllerButton);\n      controller.appendChild(controllerBar);\n      globalConfig.clips.width = controller.clientWidth; // controller bar style\n\n      controllerBarActive.style.cssText = \"\\n        width: \".concat(globalConfig.controller.currPercent, \"%;\\n      \"); // `;\n    }\n\n    _appendControllerInterface();\n  };\n\n  var frameClipExchange = function frameClipExchange(eachImgClip, currIndex) {\n    for (var i = 0; i < eachImgClip.length; i = i + 1) {\n      eachImgClip[i].style.opacity = 0;\n    }\n\n    if (currIndex >= globalConfig.clips.length) {\n      currIndex = globalConfig.clips.length;\n    } else if (currIndex <= 1) {\n      currIndex = 1;\n    }\n\n    currentClipElement = document.querySelector(\".clip-\".concat(currIndex));\n    currentClipElement.style.opacity = 1;\n  };\n\n  var handleFrameLineInterAction = function handleFrameLineInterAction(mainContent, controllerBar, controllerBarActive, dragButton) {\n    var newX;\n    var isDraggable = false;\n    var defaultOffsetX = mainContent.offsetLeft + controllerBar.offsetLeft;\n    var ratio = Math.round(globalConfig.controller.width / globalConfig.clips.length); //Draggable Switch On\n\n    function _onMouseDown() {\n      // console.log('Mouse Down!!');\n      isDraggable = true;\n    } //Draggable Switch Off\n\n\n    function _onMouseUpOut() {\n      // console.log('Mouse Up!!');\n      isDraggable = false;\n    }\n\n    function _onMouseMove(e) {\n      // console.log('Mouse Dragging!!');\n      if (!isDraggable) {\n        return;\n      }\n\n      console.log('Ratio: ', ratio); // e.preventDefault();\n\n      newX = e.pageX - defaultOffsetX; // console.log('Mouse Dragging: ', event.pageX, newX);\n\n      if (newX >= globalConfig.controller.width - 20) {\n        newX = globalConfig.controller.width - 20;\n      } else if (newX <= 10) {\n        newX = 10;\n      }\n\n      globalConfig.controller.currClipIndex = Math.round(newX / ratio);\n      console.log('currClipIndex: ', globalConfig.controller.currClipIndex);\n      dragButton.style.transform = \"translate3d(\".concat(newX, \"px, 0px, 0px) translateZ(0px)\");\n      controllerBarActive.style.width = \"\".concat(newX, \"px\");\n      frameClipExchange(newFrameClipGroup.children, globalConfig.controller.currClipIndex);\n    }\n\n    dragButton.addEventListener('mousedown', _onMouseDown);\n    window.addEventListener('mouseup', _onMouseUpOut); // dragButton.addEventListener('mouseleave', _onMouseUpOut);\n\n    window.addEventListener('mousemove', _onMouseMove); //Dragging Button\n  };\n\n  initFrameLineElement(frameElement, newFrameClipGroup, frameElementChild, newFrameController, newControllerBar, newControllerBarActive, newControllerButton);\n  handleFrameLineInterAction(frameElement, newControllerBar, newControllerBarActive, newControllerButton);\n};\n\nmodule.exports = frameLine;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/frameline.js\n");

/***/ })

})